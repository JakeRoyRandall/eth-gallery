{"version":3,"sources":["components/AuthBtn.js","App.js","reportWebVitals.js","index.js"],"names":["AuthBtn","useMoralis","authenticate","isAuthenticated","isAuthenticating","user","get","onClick","disabled","readMetadata","nft","JSON","parse","metadata","Gallery","nftList","map","i","console","log","img","image","name","style","maxWidth","maxHeight","src","replace","alt","App","useState","setNftList","account","useMoralisWeb3Api","useEffect","nftCount","a","getNFTs","chain","address","attributes","ethAddress","result","nfts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","appId","process","serverUrl","document","getElementById"],"mappings":"2YAEaA,EAAU,WAAQ,IAAD,EACqCC,cAA1DC,EADqB,EACrBA,aAAcC,EADO,EACPA,gBAAiBC,EADV,EACUA,iBAAkBC,EAD5B,EAC4BA,KAEzD,OACC,gCACIF,GAAmB,0CAAaE,EAAKC,IAAI,gBACzCH,GACH,wBACCI,QAAY,kBAAML,KAClBM,SAAaJ,EAFd,uBCoBGK,G,MAAe,SAAEC,GAAW,OAAOC,KAAKC,MAAMF,EAAIG,YAIlDC,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAElB,OACC,gCACC,yCACCA,EAAQC,KAAI,SAACN,EAAKO,GAClBC,QAAQC,IAAIV,EAAaC,IACzB,IATiBU,EASXC,EAAUZ,EAAaC,GAAvBW,MACN,OACC,yCACSX,EAAIY,KACZ,qBAAKC,MAAS,CAAEC,SAAS,QAASC,UAAU,SAAWC,KAbxCN,EAa2DC,EAbzCD,EAAIO,QAAQ,UAAW,kCAa2BC,IAAQlB,EAAIY,SAFrFL,UAWDY,EA/CH,WACX,MAA8BC,mBAAS,IAAvC,mBAAOf,EAAP,KAAgBgB,EAAhB,KACQ1B,EAASJ,cAATI,KACA2B,EAAYC,cAAZD,QAWR,OATAE,qBAAU,WACT,IAAMC,EAAQ,uCAAG,4BAAAC,EAAA,sEACQJ,EAAQK,QAAQ,CAAEC,MAAO,MAAOC,QAASlC,EAAKmC,WAAWC,aADjE,8BACgFC,OADhF,OACZC,EADY,OAEhBzB,QAAQC,IAAIwB,GACZZ,EAAWY,GAHK,2CAAH,qDAKbtC,GAAQ2B,GAAYG,MACpB,CAAC9B,EAAM2B,IAGR,eAAC,IAAD,WACC,cAAC,EAAD,IACA,cAAC,EAAD,CAASjB,QAAYA,QCXT6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,IAAD,CAAiBC,MALJC,2CAKmBC,UAJfD,kDAIjB,SACC,cAAC,EAAD,QAGFE,SAASC,eAAe,SAMzBhB,K","file":"static/js/main.f61e58d0.chunk.js","sourcesContent":["import { useMoralis } from \"react-moralis\"\n\nexport const AuthBtn = ( ) => {\n\tconst { authenticate, isAuthenticated, isAuthenticating, user } = useMoralis()\n\n\treturn (\n\t\t<div>\n\t\t\t{  isAuthenticated && <h1>Welcome {user.get(\"username\")}</h1> }\n\t\t\t{ !isAuthenticated && \n\t\t\t<button \n\t\t\t\tonClick = { () => authenticate() }\n\t\t\t\tdisabled = { isAuthenticating }\n\t\t\t>\n\t\t\t\tLogin\n\t\t\t</button> }\n\t\t</div>\n\t)\n}","import { useState, useEffect } from \"react\"\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport { AuthBtn } from \"./components/AuthBtn\";\nimport { RoutesComponent } from \"./components/RoutesComponent\";\nimport { useMoralis, useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\n\nconst App = () => {\n\tconst [nftList, setNftList] = useState([]);\n\tconst { user } = useMoralis()\n\tconst { account } = useMoralisWeb3Api()\n\n\tuseEffect(() => {\n\t\tconst nftCount = async () => { \n\t\t\tlet nfts = await (await account.getNFTs({ chain: \"eth\", address: user.attributes.ethAddress })).result\n\t\t\tconsole.log(nfts)\n\t\t\tsetNftList(nfts)\n\t\t}\n\t\t(user && account) && nftCount()\n\t},[user, account])\n\n\treturn (\n\t\t<Router>\n\t\t\t<AuthBtn />\n\t\t\t<Gallery nftList = { nftList }/>\n\t\t\t{/* <RoutesComponent /> */}\n\t\t</ Router>\n\t);\n}\n\nconst readMetadata = ( nft ) => { return JSON.parse(nft.metadata) }\n\nconst formatIPFS = ( img ) => { return img.replace(\"ipfs://\", \"https://gateway.ipfs.io/ipfs/\")}\n\nconst Gallery = ({ nftList }) => {\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Gallery</h1>\n\t\t\t{nftList.map((nft, i) => {\n\t\t\t\tconsole.log(readMetadata(nft))\n\t\t\t\tlet { image } = readMetadata(nft)\n\t\t\t\treturn (\n\t\t\t\t\t<div key={ i }>\n\t\t\t\t\t\tname: { nft.name }\n\t\t\t\t\t\t<img style = {{ maxWidth:\"100px\", maxHeight:\"100px\" }} src = { formatIPFS(image) } alt = { nft.name } />\n\t\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})}\n\t\t</div>\n\t)\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { MoralisProvider } from \"react-moralis\";\n\nconst APP_ID = process.env.REACT_APP_MORALIS_APPLICATION_ID;\nconst SERVER_URL = process.env.REACT_APP_MORALIS_SERVER_URL;\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<MoralisProvider appId={APP_ID} serverUrl={SERVER_URL}>\n\t\t\t<App />\n\t\t</MoralisProvider>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}